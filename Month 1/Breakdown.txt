üìÖ Month 1 ‚Äì Foundations in AI for Drug Discovery
üéØ Goals




Build core competency in AI/ML as applied to biology & chemistry.

Get comfortable with cheminformatics tools like RDKit.

Complete one project that demonstrates value in a drug discovery context.

Step 1: Learn the Basics (Week 1)

AI for Medicine Specialization (Coursera, DeepLearning.AI) ‚Üí pick the first course only: AI for Medical Diagnosis. (~10 hrs).

You‚Äôll learn about data preprocessing, model evaluation, and interpretability in a medical context.



Install Tools:

Python (Anaconda recommended).

Jupyter Notebooks.

Packages: rdkit, pandas, scikit-learn, matplotlib.

Dataset: download a ChEMBL subset (e.g., 5,000‚Äì10,000 molecules with drug-likeness/activity labels).
    pip install chembl_webresource_client

STEPS FOR DATASET

Step 1: Query and filter for bioactivity data


Initialize the client and query for activities. This example focuses on IC50 values.
from chembl_webresource_client.new_client import new_client
import pandas as pd

# Initialize the ChEMBL client
chembl = new_client

# Query for bioactivity data with a consistent metric (e.g., IC50)
activity_query = chembl.activity.filter(standard_type="IC50")

# Convert the query to a Pandas DataFrame
activity_df = pd.DataFrame.from_records(activity_query)
        

Filter the DataFrame. To create a high-quality dataset, perform the following filtering steps:
Exclude assays from certain categories, like toxicity (T) or absorption, distribution, metabolism, excretion (ADME) (A), and focus on binding (B) or functional (F) assays.
Remove entries where the standard value or canonical SMILES string is missing.
Keep only high-confidence measurements (confidence_score >= 8).
Standardize the units and convert the activity values (e.g., to pIC50) for consistency.

# Filter for relevant assay types
relevant_assay_types = ['B', 'F']
filtered_df = activity_df[activity_df['assay_type'].isin(relevant_assay_types)]

# Remove entries with missing activity or structure data
filtered_df = filtered_df.dropna(subset=['standard_value', 'canonical_smiles'])

# Filter for high confidence scores
filtered_df = filtered_df[filtered_df['confidence_score'] >= 8]



Step 2: Filter for drug-like properties
Convert SMILES to RDKit molecules and calculate properties.
from rdkit import Chem
from rdkit.Chem import Descriptors

# Create RDKit molecule objects from SMILES strings
filtered_df['molecule'] = filtered_df['canonical_smiles'].apply(Chem.MolFromSmiles)

# Remove molecules that failed to parse
filtered_df = filtered_df.dropna(subset=['molecule'])

# Calculate properties for drug-likeness filtering
filtered_df['MW'] = filtered_df['molecule'].apply(Descriptors.MolWt)
filtered_df['LogP'] = filtered_df['molecule'].apply(Descriptors.MolLogP)
filtered_df['HBD'] = filtered_df['molecule'].apply(Descriptors.NumHDonors)
filtered_df['HBA'] = filtered_df['molecule'].apply(Descriptors.NumHAcceptors)

Step 3: Refine the subset size and handle redundancy
Remove duplicate molecules: Many different assays in ChEMBL might report on the same molecule.

# Drop duplicate canonical SMILES strings to get unique molecules
unique_molecules_df = lipinski_filtered_df.drop_duplicates(subset='canonical_smiles')


Sample the dataset to the desired size (e.g., 5,000‚Äì10,000)
target_size = 8000
if len(unique_molecules_df) > target_size:
    final_subset = unique_molecules_df.sample(n=target_size, random_state=42)
else:
    final_subset = unique_molecules_df

Step 4: Add classification labels (activity)

For machine learning, you will need to convert the continuous IC50 data into classification labels (e.g., active/inactive). A common method is to set a threshold, such as 1000 nM.
Convert IC50 values to pIC50. For improved numerical stability, it's a common practice to convert the IC50 values to their negative log scale (pIC50).

import numpy as np

# Ensure standard_value is numeric
final_subset['standard_value'] = pd.to_numeric(final_subset['standard_value'])

# Convert IC50 in nM to pIC50
final_subset['pIC50'] = 9 - np.log10(final_subset['standard_value'])


Create a binary activity label. Define a threshold to categorize molecules as "active" or "inactive". A pIC50 value of 6.0 corresponds to an IC50 of 1000 nM.

threshold_pIC50 = 6.0
final_subset['activity_label'] = final_subset['pIC50'].apply(lambda x: 1 if x >= threshold_pIC50 else 0)


Step 5: Save the final dataset
Export the curated dataset to a CSV file for further use in machine learning workflows. 

# Select the columns you want to export
output_columns = ['canonical_smiles', 'activity_label', 'pIC50', 'MW', 'LogP']
final_subset[output_columns].to_csv('chembl_subset_drug_like.csv', index=False)


Resulting dataset characteristics
This process yields a dataset with the following properties, making it ideal for machine learning:
Size: Approximately 5,000‚Äì10,000 unique molecules.
Molecular Data: Canonical SMILES strings for each molecule.
Labels: Binary activity labels (active/inactive) and continuous pIC50 values for QSAR tasks.
Drug-likeness: Molecules filtered to obey Lipinski's Rule of Five, ensuring a focus on drug-like chemical space.
High Confidence: Entries are selected based on high confidence scores from manually curated assays. 


Step 2: Cheminformatics Foundations (Week 2)

Learn how to handle chemical data:

SMILES strings ‚Üí how molecules are encoded as text.

Calculate descriptors: LogP, TPSA, molecular weight, number of H-bond donors/acceptors.

Visualize a few molecules from SMILES in RDKit.

üëâ Small exercise: Take 10 random molecules, calculate descriptors, and make a scatter plot (MW vs LogP).





tep 3: First AI Project ‚Äì Predicting Drug-Likeness (Weeks 3‚Äì4)

Objective: Train a simple ML model that predicts whether a molecule is ‚Äúdrug-like.‚Äù

Steps:

Load dataset (SMILES + drug-likeness labels).

Use RDKit to compute descriptors (LogP, TPSA, MW, #rotatable bonds).

Train a classifier (Random Forest or Logistic Regression).

Evaluate performance with ROC-AUC and confusion matrix.

Document clearly: problem ‚Üí dataset ‚Üí features ‚Üí model ‚Üí results.

Stretch goal: Visualize ‚Äúdrug-like‚Äù vs ‚Äúnon-drug-like‚Äù molecules on a 2D PCA plot.





Step 4: Packaging & Resume-Ready Deliverable

Put the notebook on GitHub with:

README (explain drug-likeness concept, project steps, and results).

Requirements.txt.






Write a short LinkedIn post:

‚ÄúI‚Äôve just completed my first cheminformatics + AI project: predicting drug-likeness using molecular descriptors from ChEMBL and a machine learning classifier. Excited to keep bridging chemistry and AI for drug discovery üöÄ‚Äù

üîë Why this is the Best Start Point

Low barrier, high visibility: You‚Äôll get hands-on coding without requiring a PhD in ML.

Directly relevant: Shows you can apply AI to real biological/chemical problems.

Deliverable-focused: One GitHub project = one concrete resume bullet.